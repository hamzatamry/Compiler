
INSTRUCTIONS 			-> ACC_O INSTRUCTION INSTRUCTIONS' ACC_F
INSTRUCTIONS'           -> INSTRUCTIONS
                        | . 
ACC_O 					-> acc_o | .
ACC_F 					-> acc_f | .

INSTRUCTION             ->  AFFECTATION ;
                        |  APPEL_FONCTION ;
                        |  BOUCLE 
                        |  RETURN ;
                        |  VAR_DECLARATION ;
                        |  FONCTION 
                        |  CONTROLE 
                        |  EXCEPTION
                        |  FILEHANDLING 
                        


############################################# AFFECTATION #################
AFFECTATION             ->  const ID AFFECTATION'
                        | ID AFFECTATION'

AFFECTATION'            -> SYMBOLE_AFFECTATION  EXPRESSION     
SYMBOLE_AFFECTATION     -> : SYMBOLE_AFFECTATION2 | = | left_arrow
SYMBOLE_AFFECTATION2    -> = 
                        | .

EXPRESSION              ->   TERM [OPERATEURADD TERM | .]

VAR_DECLARATION         -> VARS' ; VAR_DECLARATION       
                        | .

VARS'                   -> const TYPE IDS_CONST 
                        | let JS_IDS  
						| VARS''              

VARS''                  -> ID [: TYPE  | is TYPE] OPT [, VARS'' | .]                  

IDS_CONST               -> ID AFFECTATION' [, IDS_CONST| e]   

JS_IDS                  -> ID : TYPE OPT [, JS_IDS | .]

IDS                     -> ID OPT [, IDS | .]

OPT                     ->  .
                        | AFFECTATION'

ID                      ->   [a-zA-Z]([a-zA-Z0-9_]*[a-zA-Z0-9])?       //Terminal

######################################  CONTROL  ##############################

IF_STMT			   		-> if  COND  [: | .] INSTRUCTIONS [SUITE_IF  | .]  END
			    	    | SWITCH ( EXPRESSION ) INSTRUCTIONS END
    		

COND     		->   ( STATEMENT ) | STATEMENT

SUITE_IF        -> 	ELIF_STMT | ELSE_BLOCK | .

ELIF_STMT		->  elif COND : INSTRUCTIONS [ELIF_STMT | ELSE_BLOCK] 

ELSE_BLOCK		->  else [ : | .] INSTRUCTIONS 

SHORTHAND: 
    COND ? STATEMENT : STATEMENT

END: ';'
    | .


##############################LOOPS##############################

DOWHILELOOP_STATEMENT       ->  do acc_o STATEMENTS acc_f while (CONDITION) ;
                            |   repeat STATEMENTS until CONDITION; 
                            |   .

FORLOOP_STATEMENT       ->  for A_F B_F
                        |   .

A_F 			-> (VAR_DECLARATION [; CONDITION ; INSTRUCTION)  | (VAR_DECLARATION : ITERABLE) ]
				| VAR_ID affectation NOMBRE to NOMBRE

B_F 				->  [acc_o STATEMENTS acc_f | STATEMENT]
				| entree tab STATEMENTS
				| ITERATOR in ITERABLE :
				| do STATEMENTS ;



WHILELOOP_STATEMENT     ->  while A_W B_W

A_W    -> ( CONDITION )
		| CONDITION :

B_W    -> STATEMENT
		| accolade_ouvrante STATEMENTS accolade_fermante
		| entree tab STATEMENTS
		| do STATEMENTS ;

#########################   FONCTIONS  #########################

APPEL_FONCTION          -> ID ( PARAMETERS ) ;  // "ID ();" ???

FONCTION                ->  TYPE  FONCTION'
                        |   function FONCTION'

FONCTION'               -> ID(PARAMETERS)acc_o INSTS acc_f;

PARAMETERS              -> PARAMETER
                        | . 

PARAMETER               -> ID TYPE 
                        | PARAMETER , ID TYPE

#####################################################

OPERATEURSPECIAUX       ->  ++
                        | -- 
                    
OPERATEURADD            ->   + 
                        |  add
                        |  -
                        | minus 

 OPERATEURMULT          ->   *
                        |  mult 
                        |  \
                        |  div
                        |  % 
                        |  mod
                        |  modulo 

RETURN                  -> return EXPRESSION 

CONDITION               -> BOOLEAN 
                        | EXPRESSION COMPAR EXPRESSION

COMPAR                  ->  > 
                        | < 
                        | >=
                        | <=
                        | !=
                        | ==


##################     ###### ###### 
TYPE                    ->   string 
                        | number 
                        | int 
                        | boolean 
                        | bool 
                        | char  
                        | integer 
                        | boolean 
                        | void 
                        | float 
                        | double 
                        | signed
                        | unsigned
                        | short

ID                      ->   [a-zA-Z]([a-zA-Z0-9_]*[a-zA-Z0-9])?

STRING                  ->   " STR " 
                        |    ' STR ' 

STR                     ->   [ a-zA-Z0-9_;:!,?\|[](]&~^$µéè@à` ]* 
NUMBER                  ->   [0-9]+
BOOLEAN                 ->   true | false


FILEHANDLING            -> print ( PARAMETERS ) ;
                        | printf ( PARAMETERS ) ;
                        | scanf ( PARAMETERS ) ;
                        | print ( PARAMETERS ) ;
                        | input ( PARAMETERS ) ;
                        | log ( PARAMETERS )  ;
                        | fprintf ( PARAMETERS ) ; 
                        | fscanf ( PARAMETERS ) ;
                        | fread ( PARAMETERS ) ; 
                        | fwrite (  PARAMETERS ) ;
                        | write ( PARAMETERS ) ; 
                        | read (  PARAMETERS ) ;
                        | puts ( PARAMETERS ) ; 
                        | gets (  PARAMETERS ) ;
