******************************************************************************
Tools punctuations      ~ ! @ # * ( ) _ + ' ;
******************************************************************************
double_ampersand        &&
point_interrogation     ?
double_barre            ||
virgule                 ,
deux_points             :
egal                    =
accolade_ouvrante        {
accolade_fermante 	    }
guillemets 			    "
id_pattern              [a-zA-Z]([a-zA-Z0-9_]*[a-zA-Z0-9])? 
increment               ++  
slash                    /  
pourcentage             %
decrement               --    
minus_sign              -
gtr_sign                > 
lss_sign                < 
gte_sign                >=
leq_sign                <=
neq_sign                !=
equ_sign                ==.     
string_pattern          [ a-zA-Z0-9_;:!,?\|[](]&~^$µeè@à` ]*
number_pattern          [0-9]+ 
comparator              (&|&&|)
symbole_aff             =, <-, :=

***************************************************************************************
                    Grammaire Avant transformation LL(1)
***************************************************************************************

INSTRUCTIONS 			-> accolade_ouvrante INSTRUCTION INSTRUCTIONS accolade_fermante
                        | INSTRUCTION INSTRUCTIONS
                        | INSTRUCTION .

INSTRUCTION             ->  AFFECTATION ;
                        |  APPEL_FONCTION ;
                        |  RETURN ;
                        |  BOUCLE
                        |  INPUT_OUTPUT 
                        |  FONCTION 
                        |  CONTROLE 
                        |  VAR_DECLARATION ; .

AFFECTATION             -> id deux_points egal  EXPRESSION ;
                        |  id egal EXPRESSION ;
                        |  id left_arrow EXPRESSION ; .

EXPRESSION              ->  TERM 
                        |   ( EXPRESSION )
                        |   TERM  +   EXPRESSION
                        |   TERM  minus_sign  EXPRESSION .

TERM                    ->  FACTEUR OPERATEURMULT FACTEUR
                        |   FACTEUR
                        |   + FACTEUR 
                        |   minus_sign FACTEUR
                        |   FACTEUR OPERATEURSPECIAUX .

OPERATEURMULT          ->   *
                        |  mult 
                        |  slash
                        |  div
                        |  pourcentage 
                        |  mod
                        |  modulo . 

OPERATEURSPECIAUX       ->  increment
                        | decrement . 


FACTEUR                 -> id 
                        | number 
                        | boolean
                        | APPEL_FONCTION
                        | string .

APPEL_FONCTION          -> call id ( APPEL_FONCTION_ARG .

APPEL_FONCTION_ARG      -> ARGUMENT )
                        | ) .

ARGUMENT               -> ARGUMENT virgule id 
                        |  id .

RETURN                  -> return EXPRESSION .

BOUCLE                  -> FORLOOP_STATEMENT
                        |  DOWHILELOOP_STATEMENT
                        |  WHILELOOP_STATEMENT .

FORLOOP_STATEMENT       ->  for ( VAR_DECLARATION ; CONDITIONS ; INSTRUCTION ) accolade_ouvrante INSTRUCTIONS accolade_fermante
                        |   for ( VAR_DECLARATION ; CONDITIONS ; INSTRUCTION ) INSTRUCTION 
                        |   for ( VAR_DECLARATION deux_points id ) accolade_ouvrante INSTRUCTIONS accolade_fermante   
                        |   for ( VAR_DECLARATION deux_points id ) INSTRUCTION 
                        |   for id in id accolade_ouvrante INSTRUCTIONS accolade_fermante
                        |   for id egal number to number do INSTRUCTIONS ; .

WHILELOOP_STATEMENT     ->  while ( CONDITIONS ) INSTRUCTION
                        |   while ( CONDITIONS ) accolade_ouvrante INSTRUCTIONS accolade_fermante .

DOWHILELOOP_STATEMENT   ->  do accolade_ouvrante INSTRUCTIONS accolade_fermante while ( CONDITIONS ) ;
                        |   repeat INSTRUCTIONS until CONDITIONS ; .

CONDITIONS              -> CONDITION double_ampersand CONDITIONS
                        |  CONDITION double_barre CONDITIONS
                        |  CONDITION and CONDITIONS
                        |  CONDITION or CONDITIONS
                        |  ! ( CONDITION )
                        |  not ( CONDITION )
                        |  CONDITION.

CONDITION               -> EXPRESSION comparator EXPRESSION .

INPUT_OUTPUT            -> print ( ARGUMENT ) ;
                        | printf ( ARGUMENT ) ;
                        | scanf ( ARGUMENT ) ;
                        | input ( ARGUMENT ) ;
                        | log ( ARGUMENT )  ;
                        | fprintf ( ARGUMENT ) ; 
                        | fscanf ( ARGUMENT ) ;
                        | fread ( ARGUMENT ) ; 
                        | fwrite (  ARGUMENT ) ;
                        | write ( ARGUMENT ) ; 
                        | read (  ARGUMENT ) ;
                        | puts ( ARGUMENT ) ; 
                        | gets (  ARGUMENT ) ; .

FONCTION                -> def type FONCTION2 
                        | function type FONCTION2 .

FONCTION2               -> id ( PARAMETER ) accolade_ouvrante INSTRUCTIONS accolade_fermante .

PARAMETER               -> PARAMETER virgule id type
                        |  id type .

CONTROLE                 -> IF 
                        |  CASE 
                        |  SHORTHAND .

IF                      ->   if (  CONDITION  )  BLOCK_IF 
                        |    if ( CONDITION  )  BLOCK_IF else BLOCK_IF
                        |    if ( CONDITION  )  BLOCK_IF elif BLOCK_IF else BLOCK_IF .

BLOCK_IF                ->   accolade_ouvrante INSTRUCTIONS accolade_fermante .

CASE                    ->   switch ( EXPRESSION ) accolade_ouvrante BLOCK_CASE accolade_fermante .

BLOCK_CASE              ->  case FACTEUR deux_points INSTRUCTIONS 
                        |   case FACTEUR deux_points INSTRUCTIONS  BLOCK_CASE 
                        |   default deux_points INSTRUCTIONS .

SHORTHAND               -> ( CONDITION ) point_interrogation INSTRUCTION deux_points INSTRUCTION .

VAR_DECLARATION         -> const TYPE IDS_CONST 
                        | let VARS'' .             

VARS''                  -> id VARS_TYPE symbole_aff  EXPRESSION virgule VARS'' 
                        | id VARS_TYPE symbole_aff  EXPRESSION 
                        | id VARS_TYPE virgule VARS'' 
                        | id VARS_TYPE . 

VARS_TYPE 				-> deux_points type  
						| is type .

IDS_CONST               -> id symbole_aff  EXPRESSION virgule IDS_CONST
                        | id symbole_aff  EXPRESSION .

******************************************************************************************************
                Grammaire LL(1)
******************************************************************************************************

INSTRUCTIONS            ->	accolade_ouvrante INSTRUCTION INSTRUCTIONS accolade_fermante
                        |	INSTRUCTION FINSTRUCTION .

FINSTRUCTION            ->	INSTRUCTIONS
                        |	.

INSTRUCTION             ->	AFFECTATION ;
                        |	APPEL_FONCTION ;
                        |	RETURN ;
                        |	BOUCLE
                        |	INPUT_OUTPUT
                        |	FONCTION
                        |	CONTROLE
                        |	VAR_DECLARATION ; .

AFFECTATION             ->	id Fid .

Fid                     ->	deux_points egal EXPRESSION ;
                        |	egal EXPRESSION ;
                        |	left_arrow EXPRESSION ; .

EXPRESSION              ->	TERM FTERM
                        |	( EXPRESSION ) .

FTERM                   ->	
                        |	+ EXPRESSION
                        |	minus_sign EXPRESSION .

TERM                    ->	FACTEUR FFACTEUR
                        |	+ FACTEUR
                        |	minus_sign FACTEUR .

FFACTEUR                ->	OPERATEURMULT FACTEUR
                        |	
                        |	OPERATEURSPECIAUX .

OPERATEURMULT           ->	*
                        |	mult
                        |	slash
                        |	div
                        |	pourcentage
                        |	mod
                        |	modulo .

OPERATEURSPECIAUX       ->	increment
                        |	decrement .

FACTEUR                 ->	id
                        |	number
                        |	boolean
                        |	APPEL_FONCTION
                        |	string .

APPEL_FONCTION          ->	call id ( APPEL_FONCTION_ARG .

APPEL_FONCTION_ARG      ->	ARGUMENT )
                        |	) .

ARGUMENT                ->	id ARGUMENT1 .

ARGUMENT1               ->	virgule id ARGUMENT1
                        |	.

RETURN                  ->	return EXPRESSION .

BOUCLE                  ->	FORLOOP_STATEMENT
                        |	DOWHILELOOP_STATEMENT
                        |	WHILELOOP_STATEMENT .

FORLOOP_STATEMENT       ->	for Ffor .

Ffor                    ->	( F(
                        |	id Fid3 .

F(                      ->	VAR_DECLARATION FVAR_DECLARATION .
 
FVAR_DECLARATION        ->	; F;
                        |	deux_points Fdeux_points1 .

F;                      ->	CONDITIONS FCONDITIONS1 .

FCONDITIONS1            ->	; F;1 .
  
F;1                     ->	INSTRUCTION FINSTRUCTION1 .
  
FINSTRUCTION1           ->	) F)3 .
  
F)3                     ->	accolade_ouvrante INSTRUCTIONS accolade_fermante
                        |	INSTRUCTION .
  
Fdeux_points1           ->	id Fid4 .
                        
Fid4                    ->	) F)2 .

F)2                     ->	accolade_ouvrante INSTRUCTIONS accolade_fermante
                        |	INSTRUCTION .

Fid3                    ->	in id accolade_ouvrante INSTRUCTIONS accolade_fermante
                        |	egal number to number do INSTRUCTIONS ; .

WHILELOOP_STATEMENT     ->	while Fwhile .

Fwhile                  ->	( F(1 .

F(1                     ->	CONDITIONS FCONDITIONS .

FCONDITIONS             ->	) F) .

F)                      ->	INSTRUCTION
                        |	accolade_ouvrante INSTRUCTIONS accolade_fermante .

DOWHILELOOP_STATEMENT   ->	do accolade_ouvrante INSTRUCTIONS accolade_fermante while ( CONDITIONS ) ;
                        |	repeat INSTRUCTIONS until CONDITIONS ; .

CONDITIONS              ->	CONDITION FCONDITION
                        |	! ( CONDITION )
                        |	not ( CONDITION ) .

FCONDITION              ->	double_ampersand CONDITIONS
                        |	double_barre CONDITIONS
                        |	and CONDITIONS
                        |	or CONDITIONS
                        |	.

CONDITION               ->	EXPRESSION comparator EXPRESSION .

INPUT_OUTPUT            ->	print ( ARGUMENT ) ;
                        |	printf ( ARGUMENT ) ;
                        |	scanf ( ARGUMENT ) ;
                        |	input ( ARGUMENT ) ;
                        |	log ( ARGUMENT ) ;
                        |	fprintf ( ARGUMENT ) ;
                        |	fscanf ( ARGUMENT ) ;
                        |	fread ( ARGUMENT ) ;
                        |	fwrite ( ARGUMENT ) ;
                        |	write ( ARGUMENT ) ;
                        |	read ( ARGUMENT ) ;
                        |	puts ( ARGUMENT ) ;
                        |	gets ( ARGUMENT ) ; .

FONCTION                ->	def type FONCTION2
                        |	function type FONCTION2 .

FONCTION2               ->	id ( PARAMETER ) accolade_ouverte INSTRUCTIONS accolade_fermante .

PARAMETER               ->	id type PARAMETER1 .

PARAMETER1              ->	virgule id type PARAMETER1
                        |	.

CONTROLE                ->	IF
                        |	CASE
                        |	SHORTHAND .

IF                      ->	if Fif .


Fif                     ->	( F(2 .

F(2                     ->	CONDITION FCONDITION1 .

FCONDITION1             ->	) F)1 .

F)1                     ->	BLOCK_IF FBLOCK_IF .

FBLOCK_IF               ->	
                        |	else BLOCK_IF
                        |	elif BLOCK_IF else BLOCK_IF .

BLOCK_IF                ->	accolade_ouvrante INSTRUCTIONS accolade_fermante .

CASE                    ->	switch ( EXPRESSION ) accolade_ouvrante BLOCK_CASE accolade_fermante .

BLOCK_CASE              ->	case Fcase
                        |	default deux_points INSTRUCTIONS .

Fcase                   ->	FACTEUR FFACTEUR1 .

FFACTEUR1               ->	deux_points Fdeux_points .

Fdeux_points            ->	INSTRUCTIONS FINSTRUCTIONS .

FINSTRUCTIONS           ->	
                        |	BLOCK_CASE .

SHORTHAND               ->	( CONDITION ) point_interrogation INSTRUCTION deux_points INSTRUCTION .

VAR_DECLARATION         ->	const TYPE IDS_CONST
                        |	let VARS'' .

VARS''                  ->	id Fid1 .

Fid1                    ->	VARS_TYPE FVARS_TYPE .

FVARS_TYPE              ->	symbole_aff Fsymbole_aff1
                        |	virgule VARS''
                        |	.

Fsymbole_aff1           ->	EXPRESSION FEXPRESSION1 .

FEXPRESSION1            ->	virgule VARS''
                        |	.

VARS_TYPE               ->	deux_points type
                        |	is type .

IDS_CONST               ->	id Fid2 .

Fid2                    ->	symbole_aff Fsymbole_aff .

Fsymbole_aff            ->	EXPRESSION FEXPRESSION .


FEXPRESSION             ->	virgule IDS_CONST
                        |	.